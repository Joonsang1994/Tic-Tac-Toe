{"version":3,"sources":["index.js"],"names":["Square","props","classes","iswinningTile","className","onClick","value","Board","i","this","squares","count","children","j","winningTiles","includes","push","renderSquare","React","Component","Game","state","history","Array","fill","clickPosition","stepNumber","xIsNext","lastStepClicked","sortAsc","step","setState","slice","length","calculateWinner","concat","lines","a","b","c","status","current","winner","sort","moves","map","move","row","Math","floor","col","desc","jumpTo","reverse","getWinningTiles","isDraw","handleClick","handleToggleClick","window","location","reload","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.706a3d4a.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props){\r\n    let classes = \"square\";\r\n    if(props.iswinningTile){\r\n      classes = \"winning-square\"\r\n    }\r\n      return (\r\n        <button className={classes} onClick={props.onClick}>\r\n          {props.value}\r\n        </button>\r\n      );\r\n}\r\n  \r\nclass Board extends React.Component {\r\n    renderSquare(i,iswinningTile) {\r\n      return (<Square key={i}\r\n      value={this.props.squares[i]} \r\n      iswinningTile={iswinningTile}\r\n      onClick={()=>this.props.onClick(i)}\r\n      />);\r\n    }\r\n  \r\n    render() {\r\n      let squares =[];\r\n      let count=0;\r\n      for(let i=0;i<3;i++){\r\n        let children=[];\r\n        for(let j=0;j<3;j++){\r\n          if(this.props.winningTiles.includes(count)){\r\n            children.push(this.renderSquare(count,true));\r\n          }else{\r\n            children.push(this.renderSquare(count,false));\r\n          }\r\n          \r\n          count++;\r\n        }\r\n        squares.push(<div className=\"board-row\" key={i}>{children}</div>);\r\n      }\r\n    return (\r\n        <div>\r\n          {squares}\r\n        </div>\r\n      );\r\n    }\r\n}\r\n  \r\n  class Game extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            history:[{\r\n                squares:Array(9).fill(null),\r\n                clickPosition:Array(9).fill(null)\r\n            }],\r\n            stepNumber:0,\r\n            xIsNext:true,\r\n            lastStepClicked:-1,\r\n            sortAsc: true\r\n        }\r\n    }\r\n    jumpTo(step){\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n            lastStepClicked:step\r\n        })\r\n    }\r\n    handleClick(i){\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length-1];\r\n        const squares = current.squares.slice();\r\n        if(this.calculateWinner(squares) || squares[i]){\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext?'X':'O';\r\n        //const clickPosition = current.clickPosition.slice();\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares:squares,\r\n                clickPosition:i\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n            lastStepClicked:-1\r\n        })\r\n    }\r\n    handleToggleClick(){\r\n      this.setState({\r\n        sortAsc: !this.state.sortAsc,\r\n      })\r\n    }\r\n    calculateWinner(squares) {\r\n      const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n      ];\r\n      for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n          return squares[a];\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n    isDraw(squares){\r\n      if(this.calculateWinner(squares)===null && !squares.includes(null)){\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n    getWinningTiles(squares) {\r\n      const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n      ];\r\n      for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) { \r\n          return lines[i];\r\n        }\r\n      }\r\n      return [-1,-1,-1]\r\n    }\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = this.calculateWinner(current.squares);\r\n        let sort = \"Sort Desc ↓\";\r\n        const moves = history.map((step,move)=>{\r\n          const clickPosition = this.state.history[move].clickPosition;\r\n          const row = Math.floor(clickPosition / 3);\r\n          const col = clickPosition % 3;\r\n            const desc = move?\r\n            move===this.state.lastStepClicked?\r\n            <b>Go to step #{move}. Position: ({row},{col})</b>:\r\n            <span>Go to step #{move}. Position: ({row},{col})</span>:\r\n            'Go to game start';\r\n            return (<li key={move}>\r\n                <button onClick={()=>this.jumpTo(move)}>{desc}</button>\r\n            </li>)\r\n        });\r\n        if(!this.state.sortAsc){\r\n          sort = \"Sort Asc ↑\";\r\n          moves.reverse();\r\n        }\r\n\r\n        let status;\r\n        let winningTiles = [-1,-1,-1];\r\n        if (winner) {\r\n          status = \"Winner: \" + winner;\r\n          winningTiles =  this.getWinningTiles(current.squares);\r\n        } else if (this.isDraw(current.squares)) {\r\n          status = \"Match Draw\";\r\n        } else {\r\n          status = \"Next Turn: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n        }\r\n\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board \r\n                squares={current.squares}\r\n                winningTiles={winningTiles}\r\n                onClick={(i)=> this.handleClick(i)}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <button onClick={()=>this.handleToggleClick()}>{sort}</button>\r\n            <button onClick={()=>window.location.reload()}>Restart ↺</button>\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );"],"sourceRoot":""}